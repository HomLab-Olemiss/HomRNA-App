fungAttributes<- listAttributes(ensembl)
##Use the command below to list out the appropriate gene attribute names
#Attributes<- listAttributes(ensembl)
# Convert final results .csv file into .txt file
results_csv <- "edgeR_results_ASP.csv"
write.table(read.csv(results_csv), gsub(".csv",".txt",results_csv))
results_txt <- "edgeR_results_ASP.txt"
# Check the database for entries that match the IDs of the differentially expressed genes from the results file
a <- read.table(results_txt, head=TRUE)
b <- getBM(attributes=c('ensembl_gene_id',
'start_position',
'end_position',
'description',
'go_id',
'name_1006',
'definition_1006',
'kegg',
'unipathway',
'entrezgene_id'),
filters=c('ensembl_gene_id'),
values=a$X,
mart=ensembl)
biomart_results <- "biomart_results_edgeR_newAnalysis_ASPONLY.txt"
write.table(b,file=biomart_results)
# Merge the deseq2 and biomart output
m <- merge(a, b, by.x="X", by.y="ensembl_gene_id")
write.csv(as.data.frame(m),file = "forPivot_deseg_genes.csv")
#####This section is for Chlamy gene name collection for PIVOT
ensembl_phyto <- useMart(host="https://plants.ensembl.org",
biomart="plants_mart",
port = 443)
phytoSets<- listDatasets(ensembl_phyto)
ensembl3 <- useMart(host="https://plants.ensembl.org",
biomart="plants_mart",
port = 443,
dataset="creinhardtii_eg_gene")
phytoAtrributes<- listAttributes(ensembl3)
##Use the command below to list out the appropriate gene attribute names
#Attributes<- listAttributes(ensembl)
# Convert final results .csv file into .txt file
results_csv <- "edgeR_results_CHLAM.csv"
write.table(read.csv(results_csv), gsub(".csv",".txt",results_csv))
results_txt <- "edgeR_results_CHLAM.txt"
# Check the database for entries that match the IDs of the differentially expressed genes from the results file
c <- read.table(results_txt, head=TRUE)
d <- getBM(attributes=c('ensembl_gene_id',
'start_position',
'end_position',
'description',
'go_id',
'name_1006',
'definition_1006',
'kegg_enzyme',
'entrezgene_id'),
filters=c('ensembl_gene_id'),
values=c$X,
mart=ensembl3)
biomart_results <- "biomart_results_edgeR_newAnalysis_CHLAMONLY.txt"
write.table(c,file=biomart_results)
# Merge the deseq2 and biomart output
n <- merge(c, d, by.x="X", by.y="ensembl_gene_id")
write.csv(as.data.frame(n),file = "CHLAMforPivot_edgeR_genes.csv")
BiocManager::install("debrowser")
library("debrowser", lib.loc="~/R/win-library/3.5")
install.packages("urltools")
library("debrowser", lib.loc="~/R/win-library/3.5")
detach("package:debrowser", unload=TRUE)
library("debrowser")
starDEBrowser()
startDEBrowser()
library(deBrowser)
library(debrowser)
startDEBrowser()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
pivot()
library(PIVOT)
pivot()
pivot()
pivot()
pivot()
pivot()
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
pivot()
library("igraph", lib.loc="~/R/win-library/3.5")
pivot()
library(affy)
library(estrogen)
library(vsn)
library(genefilter)
datadir <- system.file("extdata", package="estrogen")
dir(datadir)
setwd(datadir)
# Read in phenotype data and the raw CEL files
pd <- read.AnnotatedDataFrame("estrogen.txt", header=TRUE, sep="", row.names=1)
a <- ReadAffy(filenames=rownames(pData(pd)), phenoData=pd, verbose=TRUE)
# Normalise the data
x <- expresso(
a,
bgcorrect.method="rma",
normalize.method="constant",
pmcorrect.method="pmonly",
summary.method="avgdiff")
# Remove control probes
controlProbeIdx <- grep("^AFFX", rownames(x))
x <- x[-controlProbeIdx,]
# Identify genes of significant effect
lm.coef <- function(y) lm(y ~ estrogen * time.h)$coefficients
eff <- esApply(x, 1, lm.coef)
effectUp <- names(sort(eff[2,], decreasing=TRUE)[1:25])
effectDown <- names(sort(eff[2,], decreasing=FALSE)[1:25])
main.effects <- c(effectUp, effectDown)
# Filter the expression set object to include only genes of significant effect
estrogenMainEffects <- exprs(x)[main.effects,]
install.packages(affy)
install.packages("affy")
install.packages("vsn")
library(genefilter)
library(igraph)
library("igraph", lib.loc="~/R/win-library/3.5")
library("genefilter", lib.loc="~/R/win-library/3.5")
BiocManager::install("CoRegNet")
browseVignettes("CoRegNet")
library("NetGenerator")
library(PIVOT)
pivot()
install.packages("devtools")
library("devtools")
install.packages("BiocManager")
BiocManager::install("BiocUpgrade")
# Install PIVOT
library(githubinstall)
install_github("qinzhu/PIVOT")
BiocManager::install("BiocGenerics") # You need the latest BiocGenerics >=0.23.3
library(PIVOT)
pivot()
install.packages("htmlwidgets")
library(PIVOT)
pivot()
install.packages("data.table")
library(PIVOT)
install.packages("tidyr")
library(PIVOT)
install.packages("backports")
library(PIVOT)
pivot()
pivot()
library(PIVOT)
library(PIVOT)
pivot()
install.packages("githubinstall")
# Install PIVOT
library(githubinstall)
install_github("qinzhu/PIVOT")
devtools::install_github()
install("Rtools")
BiocManager::install("Rtools")
devtools::install_github().
devtools::install_github()
BiocManager::install("Rtools")
devtools::install_github()
# Install PIVOT
library(githubinstall)
gh_install_packages("qinzhu/PIVOT")
library("PIVOT", lib.loc="~/R/win-library/3.5")
pivot()
install.packages("purrr")
library("PIVOT", lib.loc="~/R/win-library/3.5")
warnings()
pivot()
library("devtools")
install_github("qinzhu/PIVOT")
install.packages("pkgbuild")
install_github("qinzhu/PIVOT")
library("devtools")
install_github("qinzhu/PIVOT")
library(PIVOT)
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
BiocManager::install("org.Hs.eg.db")
library(PIVOT)
pivot()
library("Hmisc")
mydata <- read.csv(file.choose(), header=TRUE)
#Need to flip the matrix so that the sample labels move from columns to rows
corm <- cor(t(mydata))
cormPvalue <- rcorr(as.matrix(mydata))
cormPvalue <- rcorr(as.matrix(t(mydata)))
library("Hmisc")
mydata <- read.csv(file.choose(), header=TRUE)
#Need to flip the matrix so that the sample labels move from columns to rows
#corm <- cor(t(mydata))
cormPvalue <- rcorr(as.matrix(t(mydata)))
df.cormPvalue <- data.frame(cormPvalue$P)
df.cormR <- data.frame(cormPvalue$r)
#df2.cormPvalue <- data.frame(cormPvalue$r,cormPvalue$n,cormPvalue$p)
write.csv(df.cormPvalue,"SHORTAspergillus Correlation MatrixP.csv")
write.csv(df.cormR,"SHORTAspergillus Correlation MatrixR.csv")
mydata <- read.csv(file.choose(), header=TRUE)
cormPvalue <- rcorr(as.matrix(t(mydata)))
mydata <- read.csv(file.choose(), header=TRUE)
#Need to flip the matrix so that the sample labels move from columns to rows
#corm <- cor(t(mydata))
cormPvalue <- rcorr(as.matrix(t(mydata)))
mydata <- read.csv(file.choose(), header=TRUE)
#Need to flip the matrix so that the sample labels move from columns to rows
#corm <- cor(t(mydata))
cormPvalue <- rcorr(as.matrix(t(mydata)))
df.cormPvalue <- data.frame(cormPvalue$P)
df.cormR <- data.frame(cormPvalue$r)
#df2.cormPvalue <- data.frame(cormPvalue$r,cormPvalue$n,cormPvalue$p)
write.csv(df.cormPvalue,"SHORTAspergillus Correlation MatrixP.csv")
write.csv(df.cormR,"SHORTAspergillus Correlation MatrixR.csv")
library(PIVOT)
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
library(PIVOT)
pivot()
BiocManager::install("BiocUpgrade")
BiocManager::install("GO.db")
BiocManager::install("HSMMSingleCell")
BiocManager::install("org.Mm.eg.db")
BiocManager::install("org.Hs.eg.db")
BiocManager::install("DESeq2")
BiocManager::install("SingleCellExperiment")
BiocManager::install("scater")
BiocManager::install("monocole")
BiocManager::install("GenomeInfoDb")
install_github("qinzhu/PIVOT")
install.packages("githubinstall")
gh_install_packages("qinzhu/PIVOT")
library("githubinstall")
gh_install_packages("qinzhu/PIVOT")
library(devtools)
install_github("qinzhu/PIVOT")
install_github("qinzhu/PIVOT")
install.packages("ps")
install.packages("ps")
install.packages("ps")
install_github("qinzhu/PIVOT")
library("devtools")
install_github("qinzhu/PIVOT")
library("BiocManager")
BiocManager::install("BiocGenerics")
################################################################
#Everything below this line is used to actually run PIVOT
library("PIVOT")
warnings()
################################################################
#Everything below this line is used to actually run PIVOT
library("PIVOT")
pivot()
source('C:/Users/mclea/Dropbox (HomLab)/HomLab Team Folder/HomLab/Manuscripts/Mutualism Assay/Data from May Assay/Sequencing/Analysis3/Aspergillus_Trial1/Asp_PIVOT_Output/install pivot.R')
library("cqn")
library("scales")
library("readxl")
library("tidyr")
library("writexl")
library("xlsx")
library(xlsx)
library("cqn")
library("scales")
library("readxl")
library("tidyr")
library("writexl")
library("xlsx")
library(rJava)
install.packages("xlsx")
library("xlsx")
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre7')
library("xlsx")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre7')
library("xlsx")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_241')
library("xlsx")
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_241')
library("xlsx")
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_241')
library("xlsx")
library(DESeq2)
library(edgeR)
detach("package:edgeR", unload = TRUE)
library(cqn)
library(scales)
library(readxl)
detach("package:readxl", unload = TRUE)
library(tidyr)
library(xlsx)
library(RUVSeq)
detach("package:RUVSeq", unload = TRUE)
################################################################
#Everything below this line is used to actually run PIVOT
library("PIVOT")
pivot()
################################################################
#Everything below this line is used to actually run PIVOT
library("PIVOT")
pivot()
library("PIVOT")
pivot()
library(edgeR)
library(dplyr)
shiny::runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
shiny::runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
data(exampleRanks)
print(exampleRanks)
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
shiny::runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
data <- read.table("https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/14_SeveralIndepLists.csv", header=TRUE)
print(data)
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
print(test)
print(type(test))
test <- c("testy", "testytesty")
print(test)
print(type(test))
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
library(PIVOT)
pivot()
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
shiny::runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
library(PIVOT)
pivot()
shiny::runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
shiny::runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
library(readxl)
shiny::runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
list.of.packages <- c("Glimma",
"shiny",
"regionReport",
"tidyr",
"DESeq2",
"dplyr",
"readxl",
"openxlsx",
"iheatmapr",
"edgeR",
"ggplot2",
"readr",
"shinythemes",
"shinyBS",
"magrittr",
"shinyjs",
"shinycssloaders",
"shinyWidgets",
"prettydoc",
"msigdbr",
"DOSE",
"shinyjqui",
"shinydashboard",
"org.Hs.eg.db",
"apeglm",
"clusterProfiler",
"DT",
"ashr",
"enrichplot",
"plotly",
"tidyverse",
"TCC",
"ellipse",
"factoextra",
"DEFormats",
"gprofiler2",
"fgsea",
"hrbrthemes",
"tm",
"proustr")
runApp('G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI')
setwd("G:/Shared drives/Hom Lab - Franken Lichens/Data Analysis/Analysis/UI")
runApp()
runApp()
setwd("C:/Users/mclea/OneDrive/GitHub/HomRNA")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
